{"ast":null,"code":"import _toConsumableArray from\"/home/new/Desktop/react/react-apex-chart/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/home/new/Desktop/react/react-apex-chart/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{Formik,Field,Form,ErrorMessage}from'formik';import*as Yup from'yup';import Table from'../table/Index';import Bubble from'../chart/Index';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Formiks=function Formiks(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),fData=_useState2[0],setFData=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),data=_useState4[0],setData=_useState4[1];//initialize the values of input\nvar initialValue={x:\"\",y:\"\"};// validation for the form inputs\nvar validationSchema=Yup.object({x:Yup.string().max(2,\"* Only two digits are allowed!!\").required(\"* Value can't be empty!!\"),y:Yup.string().max(2,\"* Only two digits are allowed!!\").required(\"* Value can't be empty!!\")});// form submit event\nvar showHandler=function showHandler(values){values.z=10;var datas={x:values.x,y:values.y,z:10};// convert the object into an array\nvar items=Object.values(datas);setFData([].concat(_toConsumableArray(fData),[items]));setData([].concat(_toConsumableArray(data),[datas]));// re-assign the input field value\nvalues.x='';values.y='';};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"border\",style:{'width':'600px','marginLeft':'350px','padding':'20px'},children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"h1\",{children:\"Insert Data to show on graph\"})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Formik,{initialValues:initialValue,validationSchema:validationSchema,onSubmit:showHandler,children:/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"x\",children:\"Enter X :\"}),/*#__PURE__*/_jsx(Field,{id:\"x\",name:\"x\",type:\"number\",autoComplete:\"off\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-danger\",children:/*#__PURE__*/_jsx(ErrorMessage,{name:\"x\"})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"y\",children:\"Enter Y :\"}),/*#__PURE__*/_jsx(Field,{id:\"y\",name:\"y\",type:\"number\",autoComplete:\"off\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-danger\",children:/*#__PURE__*/_jsx(ErrorMessage,{name:\"y\"})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-outline-dark\",type:\"submit\",children:\"Show\"})]})})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Table,{list:data}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bubble,{list:fData,data:data})]});};export default Formiks;","map":{"version":3,"sources":["/home/new/Desktop/react/react-apex-chart/src/component/form/Index.tsx"],"names":["React","useState","Formik","Field","Form","ErrorMessage","Yup","Table","Bubble","Formiks","fData","setFData","data","setData","initialValue","x","y","validationSchema","object","string","max","required","showHandler","values","z","datas","items","Object"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport Table from '../table/Index';\nimport Bubble from '../chart/Index';\n\nconst Formiks = () => {\n\n    const [fData, setFData] = useState<any>([]);\n    const [data, setData] = useState<any>([]);\n\n    //initialize the values of input\n    const initialValue = {\n        x: \"\",\n        y: \"\"\n    };\n\n    // validation for the form inputs\n    const validationSchema = Yup.object({\n        x: Yup.string().max(2, `* Only two digits are allowed!!`).required(`* Value can't be empty!!`),\n        y: Yup.string().max(2, `* Only two digits are allowed!!`).required(`* Value can't be empty!!`)\n    });\n\n    // form submit event\n    const showHandler = (values: any) => {\n\n        values.z = 10;\n\n        const datas = {\n            x: values.x,\n            y: values.y,\n            z: 10\n        };\n\n        // convert the object into an array\n        const items = Object.values(datas);\n        setFData([...fData, items]);\n        setData([...data, datas]);\n\n        // re-assign the input field value\n        values.x = '';\n        values.y = '';\n    };\n\n    return (\n        <>\n            <div className=\"border\" style={{ 'width': '600px', 'marginLeft': '350px', 'padding': '20px' }}>\n                <div>\n                    <h1>Insert Data to show on graph</h1>\n                </div>\n                <br />\n                <Formik\n                    initialValues={initialValue}\n                    validationSchema={validationSchema}\n                    onSubmit={showHandler}\n                >\n                    <Form>\n                        <label htmlFor=\"x\">Enter X :</label>\n                        <Field id=\"x\" name=\"x\" type='number' autoComplete='off' />\n                        <div className='text-danger'>\n                            <ErrorMessage name='x' />\n                        </div>\n                        <br />\n                        <label htmlFor=\"y\">Enter Y :</label>\n                        <Field id=\"y\" name=\"y\" type='number' autoComplete='off' />\n                        <div className='text-danger'>\n                            <ErrorMessage name='y' />\n                        </div>\n                        <br />\n                        <button className='btn btn-outline-dark' type=\"submit\">Show</button>\n                    </Form>\n                </Formik>\n            </div>\n            <br />\n            <Table list={data} />\n            <br />\n            <Bubble list={fData} data={data} />\n        </>\n    )\n}\n\nexport default Formiks;"]},"metadata":{},"sourceType":"module"}